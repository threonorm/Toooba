//
// Generated by Bluespec Compiler (build 399b09c5)
//
// On Sun Mar 13 10:50:49 CET 2022
//
//
// Ports:
// Name                         I/O  size props
// ras_0_first                    O    64
// RDY_ras_0_first                O     1 const
// RDY_ras_0_popPush              O     1 const
// ras_1_first                    O    64
// RDY_ras_1_first                O     1 const
// RDY_ras_1_popPush              O     1 const
// RDY_flush                      O     1 const
// flush_done                     O     1 const
// RDY_flush_done                 O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// ras_0_popPush_pop              I     1
// ras_0_popPush_pushAddr         I    65
// ras_1_popPush_pop              I     1
// ras_1_popPush_pushAddr         I    65
// EN_ras_0_popPush               I     1
// EN_ras_1_popPush               I     1
// EN_flush                       I     1 unused
//
// Combinational paths from inputs to outputs:
//   (ras_0_popPush_pop, ras_0_popPush_pushAddr, EN_ras_0_popPush) -> ras_1_first
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkRas(CLK,
	     RST_N,

	     ras_0_first,
	     RDY_ras_0_first,

	     ras_0_popPush_pop,
	     ras_0_popPush_pushAddr,
	     EN_ras_0_popPush,
	     RDY_ras_0_popPush,

	     ras_1_first,
	     RDY_ras_1_first,

	     ras_1_popPush_pop,
	     ras_1_popPush_pushAddr,
	     EN_ras_1_popPush,
	     RDY_ras_1_popPush,

	     EN_flush,
	     RDY_flush,

	     flush_done,
	     RDY_flush_done);
  input  CLK;
  input  RST_N;

  // value method ras_0_first
  output [63 : 0] ras_0_first;
  output RDY_ras_0_first;

  // action method ras_0_popPush
  input  ras_0_popPush_pop;
  input  [64 : 0] ras_0_popPush_pushAddr;
  input  EN_ras_0_popPush;
  output RDY_ras_0_popPush;

  // value method ras_1_first
  output [63 : 0] ras_1_first;
  output RDY_ras_1_first;

  // action method ras_1_popPush
  input  ras_1_popPush_pop;
  input  [64 : 0] ras_1_popPush_pushAddr;
  input  EN_ras_1_popPush;
  output RDY_ras_1_popPush;

  // action method flush
  input  EN_flush;
  output RDY_flush;

  // value method flush_done
  output flush_done;
  output RDY_flush_done;

  // signals for module outputs
  reg [63 : 0] ras_0_first, ras_1_first;
  wire RDY_flush,
       RDY_flush_done,
       RDY_ras_0_first,
       RDY_ras_0_popPush,
       RDY_ras_1_first,
       RDY_ras_1_popPush,
       flush_done;

  // inlined wires
  wire stack_0_lat_0$whas,
       stack_0_lat_1$whas,
       stack_1_lat_0$whas,
       stack_1_lat_1$whas,
       stack_2_lat_0$whas,
       stack_2_lat_1$whas,
       stack_3_lat_0$whas,
       stack_3_lat_1$whas,
       stack_4_lat_0$whas,
       stack_4_lat_1$whas,
       stack_5_lat_0$whas,
       stack_5_lat_1$whas,
       stack_6_lat_0$whas,
       stack_6_lat_1$whas,
       stack_7_lat_0$whas,
       stack_7_lat_1$whas;

  // register head_rl
  reg [2 : 0] head_rl;
  wire [2 : 0] head_rl$D_IN;
  wire head_rl$EN;

  // register stack_0_rl
  reg [63 : 0] stack_0_rl;
  wire [63 : 0] stack_0_rl$D_IN;
  wire stack_0_rl$EN;

  // register stack_1_rl
  reg [63 : 0] stack_1_rl;
  wire [63 : 0] stack_1_rl$D_IN;
  wire stack_1_rl$EN;

  // register stack_2_rl
  reg [63 : 0] stack_2_rl;
  wire [63 : 0] stack_2_rl$D_IN;
  wire stack_2_rl$EN;

  // register stack_3_rl
  reg [63 : 0] stack_3_rl;
  wire [63 : 0] stack_3_rl$D_IN;
  wire stack_3_rl$EN;

  // register stack_4_rl
  reg [63 : 0] stack_4_rl;
  wire [63 : 0] stack_4_rl$D_IN;
  wire stack_4_rl$EN;

  // register stack_5_rl
  reg [63 : 0] stack_5_rl;
  wire [63 : 0] stack_5_rl$D_IN;
  wire stack_5_rl$EN;

  // register stack_6_rl
  reg [63 : 0] stack_6_rl;
  wire [63 : 0] stack_6_rl$D_IN;
  wire stack_6_rl$EN;

  // register stack_7_rl
  reg [63 : 0] stack_7_rl;
  wire [63 : 0] stack_7_rl$D_IN;
  wire stack_7_rl$EN;

  // ports of submodule head_dummy2_0
  wire head_dummy2_0$D_IN, head_dummy2_0$EN, head_dummy2_0$Q_OUT;

  // ports of submodule head_dummy2_1
  wire head_dummy2_1$D_IN, head_dummy2_1$EN, head_dummy2_1$Q_OUT;

  // ports of submodule head_dummy2_2
  wire head_dummy2_2$D_IN, head_dummy2_2$EN, head_dummy2_2$Q_OUT;

  // ports of submodule stack_0_dummy2_0
  wire stack_0_dummy2_0$D_IN, stack_0_dummy2_0$EN, stack_0_dummy2_0$Q_OUT;

  // ports of submodule stack_0_dummy2_1
  wire stack_0_dummy2_1$D_IN, stack_0_dummy2_1$EN, stack_0_dummy2_1$Q_OUT;

  // ports of submodule stack_0_dummy2_2
  wire stack_0_dummy2_2$D_IN, stack_0_dummy2_2$EN, stack_0_dummy2_2$Q_OUT;

  // ports of submodule stack_1_dummy2_0
  wire stack_1_dummy2_0$D_IN, stack_1_dummy2_0$EN, stack_1_dummy2_0$Q_OUT;

  // ports of submodule stack_1_dummy2_1
  wire stack_1_dummy2_1$D_IN, stack_1_dummy2_1$EN, stack_1_dummy2_1$Q_OUT;

  // ports of submodule stack_1_dummy2_2
  wire stack_1_dummy2_2$D_IN, stack_1_dummy2_2$EN, stack_1_dummy2_2$Q_OUT;

  // ports of submodule stack_2_dummy2_0
  wire stack_2_dummy2_0$D_IN, stack_2_dummy2_0$EN, stack_2_dummy2_0$Q_OUT;

  // ports of submodule stack_2_dummy2_1
  wire stack_2_dummy2_1$D_IN, stack_2_dummy2_1$EN, stack_2_dummy2_1$Q_OUT;

  // ports of submodule stack_2_dummy2_2
  wire stack_2_dummy2_2$D_IN, stack_2_dummy2_2$EN, stack_2_dummy2_2$Q_OUT;

  // ports of submodule stack_3_dummy2_0
  wire stack_3_dummy2_0$D_IN, stack_3_dummy2_0$EN, stack_3_dummy2_0$Q_OUT;

  // ports of submodule stack_3_dummy2_1
  wire stack_3_dummy2_1$D_IN, stack_3_dummy2_1$EN, stack_3_dummy2_1$Q_OUT;

  // ports of submodule stack_3_dummy2_2
  wire stack_3_dummy2_2$D_IN, stack_3_dummy2_2$EN, stack_3_dummy2_2$Q_OUT;

  // ports of submodule stack_4_dummy2_0
  wire stack_4_dummy2_0$D_IN, stack_4_dummy2_0$EN, stack_4_dummy2_0$Q_OUT;

  // ports of submodule stack_4_dummy2_1
  wire stack_4_dummy2_1$D_IN, stack_4_dummy2_1$EN, stack_4_dummy2_1$Q_OUT;

  // ports of submodule stack_4_dummy2_2
  wire stack_4_dummy2_2$D_IN, stack_4_dummy2_2$EN, stack_4_dummy2_2$Q_OUT;

  // ports of submodule stack_5_dummy2_0
  wire stack_5_dummy2_0$D_IN, stack_5_dummy2_0$EN, stack_5_dummy2_0$Q_OUT;

  // ports of submodule stack_5_dummy2_1
  wire stack_5_dummy2_1$D_IN, stack_5_dummy2_1$EN, stack_5_dummy2_1$Q_OUT;

  // ports of submodule stack_5_dummy2_2
  wire stack_5_dummy2_2$D_IN, stack_5_dummy2_2$EN, stack_5_dummy2_2$Q_OUT;

  // ports of submodule stack_6_dummy2_0
  wire stack_6_dummy2_0$D_IN, stack_6_dummy2_0$EN, stack_6_dummy2_0$Q_OUT;

  // ports of submodule stack_6_dummy2_1
  wire stack_6_dummy2_1$D_IN, stack_6_dummy2_1$EN, stack_6_dummy2_1$Q_OUT;

  // ports of submodule stack_6_dummy2_2
  wire stack_6_dummy2_2$D_IN, stack_6_dummy2_2$EN, stack_6_dummy2_2$Q_OUT;

  // ports of submodule stack_7_dummy2_0
  wire stack_7_dummy2_0$D_IN, stack_7_dummy2_0$EN, stack_7_dummy2_0$Q_OUT;

  // ports of submodule stack_7_dummy2_1
  wire stack_7_dummy2_1$D_IN, stack_7_dummy2_1$EN, stack_7_dummy2_1$Q_OUT;

  // ports of submodule stack_7_dummy2_2
  wire stack_7_dummy2_2$D_IN, stack_7_dummy2_2$EN, stack_7_dummy2_2$Q_OUT;

  // rule scheduling signals
  wire CAN_FIRE_RL_head_canon,
       CAN_FIRE_RL_stack_0_canon,
       CAN_FIRE_RL_stack_1_canon,
       CAN_FIRE_RL_stack_2_canon,
       CAN_FIRE_RL_stack_3_canon,
       CAN_FIRE_RL_stack_4_canon,
       CAN_FIRE_RL_stack_5_canon,
       CAN_FIRE_RL_stack_6_canon,
       CAN_FIRE_RL_stack_7_canon,
       CAN_FIRE_flush,
       CAN_FIRE_ras_0_popPush,
       CAN_FIRE_ras_1_popPush,
       WILL_FIRE_RL_head_canon,
       WILL_FIRE_RL_stack_0_canon,
       WILL_FIRE_RL_stack_1_canon,
       WILL_FIRE_RL_stack_2_canon,
       WILL_FIRE_RL_stack_3_canon,
       WILL_FIRE_RL_stack_4_canon,
       WILL_FIRE_RL_stack_5_canon,
       WILL_FIRE_RL_stack_6_canon,
       WILL_FIRE_RL_stack_7_canon,
       WILL_FIRE_flush,
       WILL_FIRE_ras_0_popPush,
       WILL_FIRE_ras_1_popPush;

  // remaining internal signals
  wire [63 : 0] IF_stack_0_lat_0_whas_THEN_stack_0_lat_0_wget__ETC___d8,
		IF_stack_1_lat_0_whas__5_THEN_stack_1_lat_0_wg_ETC___d18,
		IF_stack_2_lat_0_whas__5_THEN_stack_2_lat_0_wg_ETC___d28,
		IF_stack_3_lat_0_whas__5_THEN_stack_3_lat_0_wg_ETC___d38,
		IF_stack_4_lat_0_whas__5_THEN_stack_4_lat_0_wg_ETC___d48,
		IF_stack_5_lat_0_whas__5_THEN_stack_5_lat_0_wg_ETC___d58,
		IF_stack_6_lat_0_whas__5_THEN_stack_6_lat_0_wg_ETC___d68,
		IF_stack_7_lat_0_whas__5_THEN_stack_7_lat_0_wg_ETC___d78,
		n__read__h14303,
		n__read__h14305,
		n__read__h14307,
		n__read__h14309,
		n__read__h14311,
		n__read__h14313,
		n__read__h14315,
		n__read__h14317,
		n__read__h16767,
		n__read__h16769,
		n__read__h16771,
		n__read__h16773,
		n__read__h16775,
		n__read__h16777,
		n__read__h16779,
		n__read__h16781;
  wire [2 : 0] IF_head_lat_0_whas__5_THEN_head_lat_0_wget__6__ETC___d88,
	       _theResult____h15783,
	       _theResult____h17452,
	       h___1__h15857,
	       h___1__h17523,
	       h__h15782,
	       upd__h13212,
	       upd__h16735,
	       v__h15827,
	       v__h17496,
	       x__h16647;

  // value method ras_0_first
  always@(h__h15782 or
	  n__read__h14303 or
	  n__read__h14305 or
	  n__read__h14307 or
	  n__read__h14309 or
	  n__read__h14311 or
	  n__read__h14313 or n__read__h14315 or n__read__h14317)
  begin
    case (h__h15782)
      3'd0: ras_0_first = n__read__h14303;
      3'd1: ras_0_first = n__read__h14305;
      3'd2: ras_0_first = n__read__h14307;
      3'd3: ras_0_first = n__read__h14309;
      3'd4: ras_0_first = n__read__h14311;
      3'd5: ras_0_first = n__read__h14313;
      3'd6: ras_0_first = n__read__h14315;
      3'd7: ras_0_first = n__read__h14317;
    endcase
  end
  assign RDY_ras_0_first = 1'd1 ;

  // action method ras_0_popPush
  assign RDY_ras_0_popPush = 1'd1 ;
  assign CAN_FIRE_ras_0_popPush = 1'd1 ;
  assign WILL_FIRE_ras_0_popPush = EN_ras_0_popPush ;

  // value method ras_1_first
  always@(x__h16647 or
	  n__read__h16767 or
	  n__read__h16769 or
	  n__read__h16771 or
	  n__read__h16773 or
	  n__read__h16775 or
	  n__read__h16777 or n__read__h16779 or n__read__h16781)
  begin
    case (x__h16647)
      3'd0: ras_1_first = n__read__h16767;
      3'd1: ras_1_first = n__read__h16769;
      3'd2: ras_1_first = n__read__h16771;
      3'd3: ras_1_first = n__read__h16773;
      3'd4: ras_1_first = n__read__h16775;
      3'd5: ras_1_first = n__read__h16777;
      3'd6: ras_1_first = n__read__h16779;
      3'd7: ras_1_first = n__read__h16781;
    endcase
  end
  assign RDY_ras_1_first = 1'd1 ;

  // action method ras_1_popPush
  assign RDY_ras_1_popPush = 1'd1 ;
  assign CAN_FIRE_ras_1_popPush = 1'd1 ;
  assign WILL_FIRE_ras_1_popPush = EN_ras_1_popPush ;

  // action method flush
  assign RDY_flush = 1'd1 ;
  assign CAN_FIRE_flush = 1'd1 ;
  assign WILL_FIRE_flush = EN_flush ;

  // value method flush_done
  assign flush_done = 1'd1 ;
  assign RDY_flush_done = 1'd1 ;

  // submodule head_dummy2_0
  RevertReg #(.width(32'd1), .init(1'd1)) head_dummy2_0(.CLK(CLK),
							.D_IN(head_dummy2_0$D_IN),
							.EN(head_dummy2_0$EN),
							.Q_OUT(head_dummy2_0$Q_OUT));

  // submodule head_dummy2_1
  RevertReg #(.width(32'd1), .init(1'd1)) head_dummy2_1(.CLK(CLK),
							.D_IN(head_dummy2_1$D_IN),
							.EN(head_dummy2_1$EN),
							.Q_OUT(head_dummy2_1$Q_OUT));

  // submodule head_dummy2_2
  RevertReg #(.width(32'd1), .init(1'd1)) head_dummy2_2(.CLK(CLK),
							.D_IN(head_dummy2_2$D_IN),
							.EN(head_dummy2_2$EN),
							.Q_OUT(head_dummy2_2$Q_OUT));

  // submodule stack_0_dummy2_0
  RevertReg #(.width(32'd1), .init(1'd1)) stack_0_dummy2_0(.CLK(CLK),
							   .D_IN(stack_0_dummy2_0$D_IN),
							   .EN(stack_0_dummy2_0$EN),
							   .Q_OUT(stack_0_dummy2_0$Q_OUT));

  // submodule stack_0_dummy2_1
  RevertReg #(.width(32'd1), .init(1'd1)) stack_0_dummy2_1(.CLK(CLK),
							   .D_IN(stack_0_dummy2_1$D_IN),
							   .EN(stack_0_dummy2_1$EN),
							   .Q_OUT(stack_0_dummy2_1$Q_OUT));

  // submodule stack_0_dummy2_2
  RevertReg #(.width(32'd1), .init(1'd1)) stack_0_dummy2_2(.CLK(CLK),
							   .D_IN(stack_0_dummy2_2$D_IN),
							   .EN(stack_0_dummy2_2$EN),
							   .Q_OUT(stack_0_dummy2_2$Q_OUT));

  // submodule stack_1_dummy2_0
  RevertReg #(.width(32'd1), .init(1'd1)) stack_1_dummy2_0(.CLK(CLK),
							   .D_IN(stack_1_dummy2_0$D_IN),
							   .EN(stack_1_dummy2_0$EN),
							   .Q_OUT(stack_1_dummy2_0$Q_OUT));

  // submodule stack_1_dummy2_1
  RevertReg #(.width(32'd1), .init(1'd1)) stack_1_dummy2_1(.CLK(CLK),
							   .D_IN(stack_1_dummy2_1$D_IN),
							   .EN(stack_1_dummy2_1$EN),
							   .Q_OUT(stack_1_dummy2_1$Q_OUT));

  // submodule stack_1_dummy2_2
  RevertReg #(.width(32'd1), .init(1'd1)) stack_1_dummy2_2(.CLK(CLK),
							   .D_IN(stack_1_dummy2_2$D_IN),
							   .EN(stack_1_dummy2_2$EN),
							   .Q_OUT(stack_1_dummy2_2$Q_OUT));

  // submodule stack_2_dummy2_0
  RevertReg #(.width(32'd1), .init(1'd1)) stack_2_dummy2_0(.CLK(CLK),
							   .D_IN(stack_2_dummy2_0$D_IN),
							   .EN(stack_2_dummy2_0$EN),
							   .Q_OUT(stack_2_dummy2_0$Q_OUT));

  // submodule stack_2_dummy2_1
  RevertReg #(.width(32'd1), .init(1'd1)) stack_2_dummy2_1(.CLK(CLK),
							   .D_IN(stack_2_dummy2_1$D_IN),
							   .EN(stack_2_dummy2_1$EN),
							   .Q_OUT(stack_2_dummy2_1$Q_OUT));

  // submodule stack_2_dummy2_2
  RevertReg #(.width(32'd1), .init(1'd1)) stack_2_dummy2_2(.CLK(CLK),
							   .D_IN(stack_2_dummy2_2$D_IN),
							   .EN(stack_2_dummy2_2$EN),
							   .Q_OUT(stack_2_dummy2_2$Q_OUT));

  // submodule stack_3_dummy2_0
  RevertReg #(.width(32'd1), .init(1'd1)) stack_3_dummy2_0(.CLK(CLK),
							   .D_IN(stack_3_dummy2_0$D_IN),
							   .EN(stack_3_dummy2_0$EN),
							   .Q_OUT(stack_3_dummy2_0$Q_OUT));

  // submodule stack_3_dummy2_1
  RevertReg #(.width(32'd1), .init(1'd1)) stack_3_dummy2_1(.CLK(CLK),
							   .D_IN(stack_3_dummy2_1$D_IN),
							   .EN(stack_3_dummy2_1$EN),
							   .Q_OUT(stack_3_dummy2_1$Q_OUT));

  // submodule stack_3_dummy2_2
  RevertReg #(.width(32'd1), .init(1'd1)) stack_3_dummy2_2(.CLK(CLK),
							   .D_IN(stack_3_dummy2_2$D_IN),
							   .EN(stack_3_dummy2_2$EN),
							   .Q_OUT(stack_3_dummy2_2$Q_OUT));

  // submodule stack_4_dummy2_0
  RevertReg #(.width(32'd1), .init(1'd1)) stack_4_dummy2_0(.CLK(CLK),
							   .D_IN(stack_4_dummy2_0$D_IN),
							   .EN(stack_4_dummy2_0$EN),
							   .Q_OUT(stack_4_dummy2_0$Q_OUT));

  // submodule stack_4_dummy2_1
  RevertReg #(.width(32'd1), .init(1'd1)) stack_4_dummy2_1(.CLK(CLK),
							   .D_IN(stack_4_dummy2_1$D_IN),
							   .EN(stack_4_dummy2_1$EN),
							   .Q_OUT(stack_4_dummy2_1$Q_OUT));

  // submodule stack_4_dummy2_2
  RevertReg #(.width(32'd1), .init(1'd1)) stack_4_dummy2_2(.CLK(CLK),
							   .D_IN(stack_4_dummy2_2$D_IN),
							   .EN(stack_4_dummy2_2$EN),
							   .Q_OUT(stack_4_dummy2_2$Q_OUT));

  // submodule stack_5_dummy2_0
  RevertReg #(.width(32'd1), .init(1'd1)) stack_5_dummy2_0(.CLK(CLK),
							   .D_IN(stack_5_dummy2_0$D_IN),
							   .EN(stack_5_dummy2_0$EN),
							   .Q_OUT(stack_5_dummy2_0$Q_OUT));

  // submodule stack_5_dummy2_1
  RevertReg #(.width(32'd1), .init(1'd1)) stack_5_dummy2_1(.CLK(CLK),
							   .D_IN(stack_5_dummy2_1$D_IN),
							   .EN(stack_5_dummy2_1$EN),
							   .Q_OUT(stack_5_dummy2_1$Q_OUT));

  // submodule stack_5_dummy2_2
  RevertReg #(.width(32'd1), .init(1'd1)) stack_5_dummy2_2(.CLK(CLK),
							   .D_IN(stack_5_dummy2_2$D_IN),
							   .EN(stack_5_dummy2_2$EN),
							   .Q_OUT(stack_5_dummy2_2$Q_OUT));

  // submodule stack_6_dummy2_0
  RevertReg #(.width(32'd1), .init(1'd1)) stack_6_dummy2_0(.CLK(CLK),
							   .D_IN(stack_6_dummy2_0$D_IN),
							   .EN(stack_6_dummy2_0$EN),
							   .Q_OUT(stack_6_dummy2_0$Q_OUT));

  // submodule stack_6_dummy2_1
  RevertReg #(.width(32'd1), .init(1'd1)) stack_6_dummy2_1(.CLK(CLK),
							   .D_IN(stack_6_dummy2_1$D_IN),
							   .EN(stack_6_dummy2_1$EN),
							   .Q_OUT(stack_6_dummy2_1$Q_OUT));

  // submodule stack_6_dummy2_2
  RevertReg #(.width(32'd1), .init(1'd1)) stack_6_dummy2_2(.CLK(CLK),
							   .D_IN(stack_6_dummy2_2$D_IN),
							   .EN(stack_6_dummy2_2$EN),
							   .Q_OUT(stack_6_dummy2_2$Q_OUT));

  // submodule stack_7_dummy2_0
  RevertReg #(.width(32'd1), .init(1'd1)) stack_7_dummy2_0(.CLK(CLK),
							   .D_IN(stack_7_dummy2_0$D_IN),
							   .EN(stack_7_dummy2_0$EN),
							   .Q_OUT(stack_7_dummy2_0$Q_OUT));

  // submodule stack_7_dummy2_1
  RevertReg #(.width(32'd1), .init(1'd1)) stack_7_dummy2_1(.CLK(CLK),
							   .D_IN(stack_7_dummy2_1$D_IN),
							   .EN(stack_7_dummy2_1$EN),
							   .Q_OUT(stack_7_dummy2_1$Q_OUT));

  // submodule stack_7_dummy2_2
  RevertReg #(.width(32'd1), .init(1'd1)) stack_7_dummy2_2(.CLK(CLK),
							   .D_IN(stack_7_dummy2_2$D_IN),
							   .EN(stack_7_dummy2_2$EN),
							   .Q_OUT(stack_7_dummy2_2$Q_OUT));

  // rule RL_stack_0_canon
  assign CAN_FIRE_RL_stack_0_canon = 1'd1 ;
  assign WILL_FIRE_RL_stack_0_canon = 1'd1 ;

  // rule RL_stack_1_canon
  assign CAN_FIRE_RL_stack_1_canon = 1'd1 ;
  assign WILL_FIRE_RL_stack_1_canon = 1'd1 ;

  // rule RL_stack_2_canon
  assign CAN_FIRE_RL_stack_2_canon = 1'd1 ;
  assign WILL_FIRE_RL_stack_2_canon = 1'd1 ;

  // rule RL_stack_3_canon
  assign CAN_FIRE_RL_stack_3_canon = 1'd1 ;
  assign WILL_FIRE_RL_stack_3_canon = 1'd1 ;

  // rule RL_stack_4_canon
  assign CAN_FIRE_RL_stack_4_canon = 1'd1 ;
  assign WILL_FIRE_RL_stack_4_canon = 1'd1 ;

  // rule RL_stack_5_canon
  assign CAN_FIRE_RL_stack_5_canon = 1'd1 ;
  assign WILL_FIRE_RL_stack_5_canon = 1'd1 ;

  // rule RL_stack_6_canon
  assign CAN_FIRE_RL_stack_6_canon = 1'd1 ;
  assign WILL_FIRE_RL_stack_6_canon = 1'd1 ;

  // rule RL_stack_7_canon
  assign CAN_FIRE_RL_stack_7_canon = 1'd1 ;
  assign WILL_FIRE_RL_stack_7_canon = 1'd1 ;

  // rule RL_head_canon
  assign CAN_FIRE_RL_head_canon = 1'd1 ;
  assign WILL_FIRE_RL_head_canon = 1'd1 ;

  // inlined wires
  assign stack_0_lat_0$whas =
	     EN_ras_0_popPush && v__h15827 == 3'd0 &&
	     ras_0_popPush_pushAddr[64] ;
  assign stack_0_lat_1$whas =
	     EN_ras_1_popPush && v__h17496 == 3'd0 &&
	     ras_1_popPush_pushAddr[64] ;
  assign stack_1_lat_0$whas =
	     EN_ras_0_popPush && v__h15827 == 3'd1 &&
	     ras_0_popPush_pushAddr[64] ;
  assign stack_1_lat_1$whas =
	     EN_ras_1_popPush && v__h17496 == 3'd1 &&
	     ras_1_popPush_pushAddr[64] ;
  assign stack_2_lat_0$whas =
	     EN_ras_0_popPush && v__h15827 == 3'd2 &&
	     ras_0_popPush_pushAddr[64] ;
  assign stack_2_lat_1$whas =
	     EN_ras_1_popPush && v__h17496 == 3'd2 &&
	     ras_1_popPush_pushAddr[64] ;
  assign stack_3_lat_0$whas =
	     EN_ras_0_popPush && v__h15827 == 3'd3 &&
	     ras_0_popPush_pushAddr[64] ;
  assign stack_3_lat_1$whas =
	     EN_ras_1_popPush && v__h17496 == 3'd3 &&
	     ras_1_popPush_pushAddr[64] ;
  assign stack_4_lat_0$whas =
	     EN_ras_0_popPush && v__h15827 == 3'd4 &&
	     ras_0_popPush_pushAddr[64] ;
  assign stack_4_lat_1$whas =
	     EN_ras_1_popPush && v__h17496 == 3'd4 &&
	     ras_1_popPush_pushAddr[64] ;
  assign stack_5_lat_0$whas =
	     EN_ras_0_popPush && v__h15827 == 3'd5 &&
	     ras_0_popPush_pushAddr[64] ;
  assign stack_5_lat_1$whas =
	     EN_ras_1_popPush && v__h17496 == 3'd5 &&
	     ras_1_popPush_pushAddr[64] ;
  assign stack_6_lat_0$whas =
	     EN_ras_0_popPush && v__h15827 == 3'd6 &&
	     ras_0_popPush_pushAddr[64] ;
  assign stack_6_lat_1$whas =
	     EN_ras_1_popPush && v__h17496 == 3'd6 &&
	     ras_1_popPush_pushAddr[64] ;
  assign stack_7_lat_0$whas =
	     EN_ras_0_popPush && v__h15827 == 3'd7 &&
	     ras_0_popPush_pushAddr[64] ;
  assign stack_7_lat_1$whas =
	     EN_ras_1_popPush && v__h17496 == 3'd7 &&
	     ras_1_popPush_pushAddr[64] ;

  // register head_rl
  assign head_rl$D_IN =
	     EN_ras_1_popPush ?
	       upd__h13212 :
	       IF_head_lat_0_whas__5_THEN_head_lat_0_wget__6__ETC___d88 ;
  assign head_rl$EN = 1'd1 ;

  // register stack_0_rl
  assign stack_0_rl$D_IN =
	     stack_0_lat_1$whas ?
	       ras_1_popPush_pushAddr[63:0] :
	       IF_stack_0_lat_0_whas_THEN_stack_0_lat_0_wget__ETC___d8 ;
  assign stack_0_rl$EN = 1'd1 ;

  // register stack_1_rl
  assign stack_1_rl$D_IN =
	     stack_1_lat_1$whas ?
	       ras_1_popPush_pushAddr[63:0] :
	       IF_stack_1_lat_0_whas__5_THEN_stack_1_lat_0_wg_ETC___d18 ;
  assign stack_1_rl$EN = 1'd1 ;

  // register stack_2_rl
  assign stack_2_rl$D_IN =
	     stack_2_lat_1$whas ?
	       ras_1_popPush_pushAddr[63:0] :
	       IF_stack_2_lat_0_whas__5_THEN_stack_2_lat_0_wg_ETC___d28 ;
  assign stack_2_rl$EN = 1'd1 ;

  // register stack_3_rl
  assign stack_3_rl$D_IN =
	     stack_3_lat_1$whas ?
	       ras_1_popPush_pushAddr[63:0] :
	       IF_stack_3_lat_0_whas__5_THEN_stack_3_lat_0_wg_ETC___d38 ;
  assign stack_3_rl$EN = 1'd1 ;

  // register stack_4_rl
  assign stack_4_rl$D_IN =
	     stack_4_lat_1$whas ?
	       ras_1_popPush_pushAddr[63:0] :
	       IF_stack_4_lat_0_whas__5_THEN_stack_4_lat_0_wg_ETC___d48 ;
  assign stack_4_rl$EN = 1'd1 ;

  // register stack_5_rl
  assign stack_5_rl$D_IN =
	     stack_5_lat_1$whas ?
	       ras_1_popPush_pushAddr[63:0] :
	       IF_stack_5_lat_0_whas__5_THEN_stack_5_lat_0_wg_ETC___d58 ;
  assign stack_5_rl$EN = 1'd1 ;

  // register stack_6_rl
  assign stack_6_rl$D_IN =
	     stack_6_lat_1$whas ?
	       ras_1_popPush_pushAddr[63:0] :
	       IF_stack_6_lat_0_whas__5_THEN_stack_6_lat_0_wg_ETC___d68 ;
  assign stack_6_rl$EN = 1'd1 ;

  // register stack_7_rl
  assign stack_7_rl$D_IN =
	     stack_7_lat_1$whas ?
	       ras_1_popPush_pushAddr[63:0] :
	       IF_stack_7_lat_0_whas__5_THEN_stack_7_lat_0_wg_ETC___d78 ;
  assign stack_7_rl$EN = 1'd1 ;

  // submodule head_dummy2_0
  assign head_dummy2_0$D_IN = 1'd1 ;
  assign head_dummy2_0$EN = EN_ras_0_popPush ;

  // submodule head_dummy2_1
  assign head_dummy2_1$D_IN = 1'd1 ;
  assign head_dummy2_1$EN = EN_ras_1_popPush ;

  // submodule head_dummy2_2
  assign head_dummy2_2$D_IN = 1'b0 ;
  assign head_dummy2_2$EN = 1'b0 ;

  // submodule stack_0_dummy2_0
  assign stack_0_dummy2_0$D_IN = 1'd1 ;
  assign stack_0_dummy2_0$EN = stack_0_lat_0$whas ;

  // submodule stack_0_dummy2_1
  assign stack_0_dummy2_1$D_IN = 1'd1 ;
  assign stack_0_dummy2_1$EN = stack_0_lat_1$whas ;

  // submodule stack_0_dummy2_2
  assign stack_0_dummy2_2$D_IN = 1'b0 ;
  assign stack_0_dummy2_2$EN = 1'b0 ;

  // submodule stack_1_dummy2_0
  assign stack_1_dummy2_0$D_IN = 1'd1 ;
  assign stack_1_dummy2_0$EN = stack_1_lat_0$whas ;

  // submodule stack_1_dummy2_1
  assign stack_1_dummy2_1$D_IN = 1'd1 ;
  assign stack_1_dummy2_1$EN = stack_1_lat_1$whas ;

  // submodule stack_1_dummy2_2
  assign stack_1_dummy2_2$D_IN = 1'b0 ;
  assign stack_1_dummy2_2$EN = 1'b0 ;

  // submodule stack_2_dummy2_0
  assign stack_2_dummy2_0$D_IN = 1'd1 ;
  assign stack_2_dummy2_0$EN = stack_2_lat_0$whas ;

  // submodule stack_2_dummy2_1
  assign stack_2_dummy2_1$D_IN = 1'd1 ;
  assign stack_2_dummy2_1$EN = stack_2_lat_1$whas ;

  // submodule stack_2_dummy2_2
  assign stack_2_dummy2_2$D_IN = 1'b0 ;
  assign stack_2_dummy2_2$EN = 1'b0 ;

  // submodule stack_3_dummy2_0
  assign stack_3_dummy2_0$D_IN = 1'd1 ;
  assign stack_3_dummy2_0$EN = stack_3_lat_0$whas ;

  // submodule stack_3_dummy2_1
  assign stack_3_dummy2_1$D_IN = 1'd1 ;
  assign stack_3_dummy2_1$EN = stack_3_lat_1$whas ;

  // submodule stack_3_dummy2_2
  assign stack_3_dummy2_2$D_IN = 1'b0 ;
  assign stack_3_dummy2_2$EN = 1'b0 ;

  // submodule stack_4_dummy2_0
  assign stack_4_dummy2_0$D_IN = 1'd1 ;
  assign stack_4_dummy2_0$EN = stack_4_lat_0$whas ;

  // submodule stack_4_dummy2_1
  assign stack_4_dummy2_1$D_IN = 1'd1 ;
  assign stack_4_dummy2_1$EN = stack_4_lat_1$whas ;

  // submodule stack_4_dummy2_2
  assign stack_4_dummy2_2$D_IN = 1'b0 ;
  assign stack_4_dummy2_2$EN = 1'b0 ;

  // submodule stack_5_dummy2_0
  assign stack_5_dummy2_0$D_IN = 1'd1 ;
  assign stack_5_dummy2_0$EN = stack_5_lat_0$whas ;

  // submodule stack_5_dummy2_1
  assign stack_5_dummy2_1$D_IN = 1'd1 ;
  assign stack_5_dummy2_1$EN = stack_5_lat_1$whas ;

  // submodule stack_5_dummy2_2
  assign stack_5_dummy2_2$D_IN = 1'b0 ;
  assign stack_5_dummy2_2$EN = 1'b0 ;

  // submodule stack_6_dummy2_0
  assign stack_6_dummy2_0$D_IN = 1'd1 ;
  assign stack_6_dummy2_0$EN = stack_6_lat_0$whas ;

  // submodule stack_6_dummy2_1
  assign stack_6_dummy2_1$D_IN = 1'd1 ;
  assign stack_6_dummy2_1$EN = stack_6_lat_1$whas ;

  // submodule stack_6_dummy2_2
  assign stack_6_dummy2_2$D_IN = 1'b0 ;
  assign stack_6_dummy2_2$EN = 1'b0 ;

  // submodule stack_7_dummy2_0
  assign stack_7_dummy2_0$D_IN = 1'd1 ;
  assign stack_7_dummy2_0$EN = stack_7_lat_0$whas ;

  // submodule stack_7_dummy2_1
  assign stack_7_dummy2_1$D_IN = 1'd1 ;
  assign stack_7_dummy2_1$EN = stack_7_lat_1$whas ;

  // submodule stack_7_dummy2_2
  assign stack_7_dummy2_2$D_IN = 1'b0 ;
  assign stack_7_dummy2_2$EN = 1'b0 ;

  // remaining internal signals
  assign IF_head_lat_0_whas__5_THEN_head_lat_0_wget__6__ETC___d88 =
	     EN_ras_0_popPush ? upd__h16735 : head_rl ;
  assign IF_stack_0_lat_0_whas_THEN_stack_0_lat_0_wget__ETC___d8 =
	     stack_0_lat_0$whas ? ras_0_popPush_pushAddr[63:0] : stack_0_rl ;
  assign IF_stack_1_lat_0_whas__5_THEN_stack_1_lat_0_wg_ETC___d18 =
	     stack_1_lat_0$whas ? ras_0_popPush_pushAddr[63:0] : stack_1_rl ;
  assign IF_stack_2_lat_0_whas__5_THEN_stack_2_lat_0_wg_ETC___d28 =
	     stack_2_lat_0$whas ? ras_0_popPush_pushAddr[63:0] : stack_2_rl ;
  assign IF_stack_3_lat_0_whas__5_THEN_stack_3_lat_0_wg_ETC___d38 =
	     stack_3_lat_0$whas ? ras_0_popPush_pushAddr[63:0] : stack_3_rl ;
  assign IF_stack_4_lat_0_whas__5_THEN_stack_4_lat_0_wg_ETC___d48 =
	     stack_4_lat_0$whas ? ras_0_popPush_pushAddr[63:0] : stack_4_rl ;
  assign IF_stack_5_lat_0_whas__5_THEN_stack_5_lat_0_wg_ETC___d58 =
	     stack_5_lat_0$whas ? ras_0_popPush_pushAddr[63:0] : stack_5_rl ;
  assign IF_stack_6_lat_0_whas__5_THEN_stack_6_lat_0_wg_ETC___d68 =
	     stack_6_lat_0$whas ? ras_0_popPush_pushAddr[63:0] : stack_6_rl ;
  assign IF_stack_7_lat_0_whas__5_THEN_stack_7_lat_0_wg_ETC___d78 =
	     stack_7_lat_0$whas ? ras_0_popPush_pushAddr[63:0] : stack_7_rl ;
  assign _theResult____h15783 =
	     ras_0_popPush_pop ? h___1__h15857 : h__h15782 ;
  assign _theResult____h17452 =
	     ras_1_popPush_pop ? h___1__h17523 : x__h16647 ;
  assign h___1__h15857 = h__h15782 - 3'd1 ;
  assign h___1__h17523 = x__h16647 - 3'd1 ;
  assign h__h15782 =
	     (head_dummy2_0$Q_OUT && head_dummy2_1$Q_OUT &&
	      head_dummy2_2$Q_OUT) ?
	       head_rl :
	       3'd0 ;
  assign n__read__h14303 =
	     (stack_0_dummy2_0$Q_OUT && stack_0_dummy2_1$Q_OUT &&
	      stack_0_dummy2_2$Q_OUT) ?
	       stack_0_rl :
	       64'd0 ;
  assign n__read__h14305 =
	     (stack_1_dummy2_0$Q_OUT && stack_1_dummy2_1$Q_OUT &&
	      stack_1_dummy2_2$Q_OUT) ?
	       stack_1_rl :
	       64'd0 ;
  assign n__read__h14307 =
	     (stack_2_dummy2_0$Q_OUT && stack_2_dummy2_1$Q_OUT &&
	      stack_2_dummy2_2$Q_OUT) ?
	       stack_2_rl :
	       64'd0 ;
  assign n__read__h14309 =
	     (stack_3_dummy2_0$Q_OUT && stack_3_dummy2_1$Q_OUT &&
	      stack_3_dummy2_2$Q_OUT) ?
	       stack_3_rl :
	       64'd0 ;
  assign n__read__h14311 =
	     (stack_4_dummy2_0$Q_OUT && stack_4_dummy2_1$Q_OUT &&
	      stack_4_dummy2_2$Q_OUT) ?
	       stack_4_rl :
	       64'd0 ;
  assign n__read__h14313 =
	     (stack_5_dummy2_0$Q_OUT && stack_5_dummy2_1$Q_OUT &&
	      stack_5_dummy2_2$Q_OUT) ?
	       stack_5_rl :
	       64'd0 ;
  assign n__read__h14315 =
	     (stack_6_dummy2_0$Q_OUT && stack_6_dummy2_1$Q_OUT &&
	      stack_6_dummy2_2$Q_OUT) ?
	       stack_6_rl :
	       64'd0 ;
  assign n__read__h14317 =
	     (stack_7_dummy2_0$Q_OUT && stack_7_dummy2_1$Q_OUT &&
	      stack_7_dummy2_2$Q_OUT) ?
	       stack_7_rl :
	       64'd0 ;
  assign n__read__h16767 =
	     (stack_0_dummy2_1$Q_OUT && stack_0_dummy2_2$Q_OUT) ?
	       IF_stack_0_lat_0_whas_THEN_stack_0_lat_0_wget__ETC___d8 :
	       64'd0 ;
  assign n__read__h16769 =
	     (stack_1_dummy2_1$Q_OUT && stack_1_dummy2_2$Q_OUT) ?
	       IF_stack_1_lat_0_whas__5_THEN_stack_1_lat_0_wg_ETC___d18 :
	       64'd0 ;
  assign n__read__h16771 =
	     (stack_2_dummy2_1$Q_OUT && stack_2_dummy2_2$Q_OUT) ?
	       IF_stack_2_lat_0_whas__5_THEN_stack_2_lat_0_wg_ETC___d28 :
	       64'd0 ;
  assign n__read__h16773 =
	     (stack_3_dummy2_1$Q_OUT && stack_3_dummy2_2$Q_OUT) ?
	       IF_stack_3_lat_0_whas__5_THEN_stack_3_lat_0_wg_ETC___d38 :
	       64'd0 ;
  assign n__read__h16775 =
	     (stack_4_dummy2_1$Q_OUT && stack_4_dummy2_2$Q_OUT) ?
	       IF_stack_4_lat_0_whas__5_THEN_stack_4_lat_0_wg_ETC___d48 :
	       64'd0 ;
  assign n__read__h16777 =
	     (stack_5_dummy2_1$Q_OUT && stack_5_dummy2_2$Q_OUT) ?
	       IF_stack_5_lat_0_whas__5_THEN_stack_5_lat_0_wg_ETC___d58 :
	       64'd0 ;
  assign n__read__h16779 =
	     (stack_6_dummy2_1$Q_OUT && stack_6_dummy2_2$Q_OUT) ?
	       IF_stack_6_lat_0_whas__5_THEN_stack_6_lat_0_wg_ETC___d68 :
	       64'd0 ;
  assign n__read__h16781 =
	     (stack_7_dummy2_1$Q_OUT && stack_7_dummy2_2$Q_OUT) ?
	       IF_stack_7_lat_0_whas__5_THEN_stack_7_lat_0_wg_ETC___d78 :
	       64'd0 ;
  assign upd__h13212 =
	     ras_1_popPush_pushAddr[64] ? v__h17496 : _theResult____h17452 ;
  assign upd__h16735 =
	     ras_0_popPush_pushAddr[64] ? v__h15827 : _theResult____h15783 ;
  assign v__h15827 = _theResult____h15783 + 3'd1 ;
  assign v__h17496 = _theResult____h17452 + 3'd1 ;
  assign x__h16647 =
	     (head_dummy2_1$Q_OUT && head_dummy2_2$Q_OUT) ?
	       IF_head_lat_0_whas__5_THEN_head_lat_0_wget__6__ETC___d88 :
	       3'd0 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        head_rl <= `BSV_ASSIGNMENT_DELAY 3'd0;
	stack_0_rl <= `BSV_ASSIGNMENT_DELAY 64'd0;
	stack_1_rl <= `BSV_ASSIGNMENT_DELAY 64'd0;
	stack_2_rl <= `BSV_ASSIGNMENT_DELAY 64'd0;
	stack_3_rl <= `BSV_ASSIGNMENT_DELAY 64'd0;
	stack_4_rl <= `BSV_ASSIGNMENT_DELAY 64'd0;
	stack_5_rl <= `BSV_ASSIGNMENT_DELAY 64'd0;
	stack_6_rl <= `BSV_ASSIGNMENT_DELAY 64'd0;
	stack_7_rl <= `BSV_ASSIGNMENT_DELAY 64'd0;
      end
    else
      begin
        if (head_rl$EN) head_rl <= `BSV_ASSIGNMENT_DELAY head_rl$D_IN;
	if (stack_0_rl$EN)
	  stack_0_rl <= `BSV_ASSIGNMENT_DELAY stack_0_rl$D_IN;
	if (stack_1_rl$EN)
	  stack_1_rl <= `BSV_ASSIGNMENT_DELAY stack_1_rl$D_IN;
	if (stack_2_rl$EN)
	  stack_2_rl <= `BSV_ASSIGNMENT_DELAY stack_2_rl$D_IN;
	if (stack_3_rl$EN)
	  stack_3_rl <= `BSV_ASSIGNMENT_DELAY stack_3_rl$D_IN;
	if (stack_4_rl$EN)
	  stack_4_rl <= `BSV_ASSIGNMENT_DELAY stack_4_rl$D_IN;
	if (stack_5_rl$EN)
	  stack_5_rl <= `BSV_ASSIGNMENT_DELAY stack_5_rl$D_IN;
	if (stack_6_rl$EN)
	  stack_6_rl <= `BSV_ASSIGNMENT_DELAY stack_6_rl$D_IN;
	if (stack_7_rl$EN)
	  stack_7_rl <= `BSV_ASSIGNMENT_DELAY stack_7_rl$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    head_rl = 3'h2;
    stack_0_rl = 64'hAAAAAAAAAAAAAAAA;
    stack_1_rl = 64'hAAAAAAAAAAAAAAAA;
    stack_2_rl = 64'hAAAAAAAAAAAAAAAA;
    stack_3_rl = 64'hAAAAAAAAAAAAAAAA;
    stack_4_rl = 64'hAAAAAAAAAAAAAAAA;
    stack_5_rl = 64'hAAAAAAAAAAAAAAAA;
    stack_6_rl = 64'hAAAAAAAAAAAAAAAA;
    stack_7_rl = 64'hAAAAAAAAAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkRas

